{"version":3,"sources":["components/Tiles/Tiles.js","components/Header/Header.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Tile","props","console","log","id","className","name","onClick","checkPick","src","img","alt","Header","reload","window","location","addToScore","score","state","currentScore","topScore","setState","alreadyChosen","indexOf","chosen","push","shuffleList","characters","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","character","key","React","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2nCAYeA,G,YATF,SAACC,GAEV,OADAC,QAAQC,IAAIF,EAAMG,IAEd,yBAAKC,UAAU,OAAOC,KAAML,EAAMK,KAAMC,QAAS,kBAAMN,EAAMO,UAAUP,EAAMG,MACzE,yBAAKC,UAAU,aAAaI,IAAKR,EAAMS,IAAKC,IAAI,Q,OC6G7CC,E,YA9GX,aAAe,IAAD,8BACV,+CASJC,OAAS,WACLC,OAAOC,SAASF,UAXN,EAcdG,WAAa,WACT,IAAIC,EAAQ,EAAKC,MAAMC,aAAe,EACtCjB,QAAQC,IAAR,iBAAsBc,IACnBA,EAAQ,EAAKC,MAAME,UAClBlB,QAAQC,IAAR,yBAA8Bc,IAC9B,EAAKI,SAAS,CAACF,aAAcF,EAAOG,SAAUH,KAG9C,EAAKI,SAAS,CAACF,aAAcF,KAtBvB,EA0BdT,UAAY,SAACJ,GAGT,GADAF,QAAQC,IAAI,EAAKe,MAAMI,gBACsB,IAA1C,EAAKJ,MAAMI,cAAcC,QAAQnB,GAAW,CAC3C,IAAIoB,EAAS,EAAKN,MAAMI,cACxBE,EAAOC,KAAKrB,GACZF,QAAQC,IAAIqB,GACZ,EAAKH,SAAS,CAACC,cAAeE,IAC9B,EAAKR,aACL,EAAKU,YAAY,EAAKR,MAAMS,iBAI5B,EAAKN,SAAS,CAACF,aAAc,EAAGG,cAAe,MAvCzC,EA2CdI,YAAc,SAACE,GAIX,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB3B,QAAQC,IAAIyB,GACZ,EAAKP,SAAS,CAACM,WAAYC,KAzD3B,EAAKV,MAAQ,CACTE,SAAU,EACVD,aAAc,EACdQ,WAAYA,EACZL,cAAe,IANT,E,sEA8DJ,IAAD,OACL,OACI,oCACA,yBAAKlB,GAAG,wBACJ,yBAAKA,GAAG,wBAAwBC,UAAU,yBACtC,wBAAIA,UAAU,cAAcE,QAAS6B,KAAKvB,QAA1C,gBAIJ,yBAAKR,UAAU,yBACX,wBAAIA,UAAU,cAAcD,GAAG,sBAA/B,4BAIJ,yBAAKA,GAAG,yBAAyBC,UAAU,yBACvC,wBAAIA,UAAU,eAAd,kBACoB+B,KAAKlB,MAAMC,cAE/B,wBAAIf,GAAG,iBAAiBC,UAAU,eAAlC,cACgB+B,KAAKlB,MAAME,YAInC,yBAAKhB,GAAG,UACJ,wBAAIA,GAAG,iBAAP,eACA,wBAAIA,GAAG,2BAAP,kFAEJ,yBAAKA,GAAG,mBACHgC,KAAKlB,MAAMS,WAAWU,IAAI,SAAAC,GACvB,OAAQ,kBAAC,EAAD,CACJC,IAAKD,EAAUlC,GACfA,GAAIkC,EAAUlC,GACdE,KAAMgC,EAAUhC,KAChBI,IAAK4B,EAAU5B,IACfF,UAAW,EAAKA,eAI5B,yBAAKJ,GAAG,oBACJ,yBAAKC,UAAU,yBACX,wBAAIA,UAAU,eAAd,4B,GAvGCmC,IAAMC,WCKZC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f2ff7188.chunk.js","sourcesContent":["import React from 'react';\nimport './Tiles.css'\n\nconst Tile = (props) => {\n    console.log(props.id);\n    return ( \n        <div className=\"tile\" name={props.name} onClick={() => props.checkPick(props.id)}>\n            <img className=\"tile-image\" src={props.img} alt=\"\" />\n        </div>\n     );\n}\n \nexport default Tile;","import React from 'react';\nimport './Header.css';\nimport Tile from '../Tiles/Tiles.js'\nimport characters from '../../characters.json'\n\nclass Header extends React.Component {\n    constructor() {\n        super();\n        this.state = { \n            topScore: 0,\n            currentScore: 0,\n            characters: characters,\n            alreadyChosen: []\n         }\n    }\n\n    reload = () =>{\n        window.location.reload();\n    }\n\n    addToScore = () => {\n        let score = this.state.currentScore + 1;\n        console.log(`score: ${score}`);\n        if(score > this.state.topScore){\n            console.log(`current score: ${score}`);\n            this.setState({currentScore: score, topScore: score});\n        }\n        else{\n            this.setState({currentScore: score});\n        }\n    }\n\n    checkPick = (id) => {\n        //not already chosen\n        console.log(this.state.alreadyChosen);\n        if(this.state.alreadyChosen.indexOf(id) === -1){\n            let chosen = this.state.alreadyChosen;\n            chosen.push(id);\n            console.log(chosen);\n            this.setState({alreadyChosen: chosen});\n            this.addToScore();\n            this.shuffleList(this.state.characters);\n        } \n        //already chosen\n        else{\n            this.setState({currentScore: 0, alreadyChosen: []})\n        }  \n    }\n\n    shuffleList = (array) => {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n        console.log(array);\n        this.setState({characters: array});\n      }\n\n    render() { \n        return (\n            <> \n            <div id='background-container'>\n                <div id=\"header-left-container\" className=\"header-text-container\">\n                    <h1 className=\"header-text\" onClick={this.reload}>\n                        Clicky Game\n                    </h1>\n                </div>\n                <div className=\"header-text-container\">\n                    <h1 className=\"header-text\" id=\"header-middle-text\">\n                        Click an image to begin\n                    </h1>\n                </div>\n                <div id=\"header-right-container\" className=\"header-text-container\">\n                    <h2 className=\"header-text\">\n                        Current Score: {this.state.currentScore}\n                    </h2>\n                    <h2 id=\"top-score-text\" className=\"header-text\">\n                        Top Score: {this.state.topScore}\n                    </h2>\n                </div>\n            </div>\n            <div id=\"buffer\">\n                <h1 id=\"buffer-header\">Memory Game</h1>\n                <h3 id=\"buffer-description-text\">Click on an image to earn points, but don't click on any item more than once!</h3>\n            </div>\n            <div id=\"tiles-container\">\n                {this.state.characters.map(character =>{\n                    return (<Tile \n                        key={character.id} \n                        id={character.id}\n                        name={character.name} \n                        img={character.img}\n                        checkPick={this.checkPick}\n                        />);\n                })}\n            </div>\n            <div id=\"footer-container\">\n                <div className=\"footer-text-container\">\n                    <h3 className=\"footer-text\">Test your memory!</h3>\n                </div>\n            </div>\n            </>\n            );\n    }\n}\n \nexport default Header;","import React from 'react';\nimport './App.css';\nimport Header from './../Header/Header.js'\n\nfunction App() {\n  return (\n    <Header/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}